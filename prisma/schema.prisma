// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Admin {
  username      String   @id
  no_hp         String   @db.VarChar(13)
  password      String
  report        Report[]
  refresh_token String?

  @@map("admin")
}

model User {
  username      String  @id
  no_hp         String  @db.VarChar(13)
  alamat        String? @db.Text()
  password      String
  cart          Cart[]
  order         Order[]
  refresh_token String?

  @@map("user")
}

model Product {
  id           String  @id @default(uuid())
  product_name String
  price        Int     @default(0)
  description  String
  picture      String
  stock        Int     @default(0)
  category_id  String?
  Cart         Cart[]

  @@map("product")
}

model Category {
  id            String @id @default(uuid())
  category_name String @db.VarChar(40)

  @@map("category")
}

model Cart {
  id            String  @id @default(uuid())
  username_user String
  product_id    String
  qty           Int     @default(1)
  total_price   Int     @default(0)
  user          User    @relation(fields: [username_user], references: [username], onUpdate: Cascade, onDelete: Cascade)
  product       Product @relation(fields: [product_id], references: [id], onUpdate: Cascade, onDelete: Cascade)

  @@map("cart")
}

model Order {
  id            String  @id @default(uuid())
  status        Status  @default(menunggu)
  username_user String
  cart_id       String  @unique
  user          User    @relation(fields: [username_user], references: [username], onUpdate: Cascade, onDelete: Cascade)
  report        Report?

  @@map("order")
}

model Invoice {
  id               String @id @default(uuid())
  invoice_document String

  @@map("invoice")
}

model Report {
  id             String   @id @default(uuid())
  date           DateTime @default(now()) @db.DateTime()
  username_admin String
  order_id       String   @unique
  admin          Admin    @relation(fields: [username_admin], references: [username], onUpdate: Cascade, onDelete: Cascade)
  order          Order    @relation(fields: [order_id], references: [id], onUpdate: Cascade, onDelete: Cascade)

  @@map("report")
}

enum Status {
  ditolak
  menunggu
  selesai
}
